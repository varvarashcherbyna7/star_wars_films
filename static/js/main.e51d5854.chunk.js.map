{"version":3,"sources":["components/Search/Search.js","components/img/star_wars_logo.png","components/Navbar/Navbar.js","components/Loader/Loader.js","components/FilmsCards/FilmsCards.js","components/ToggleBox/ToggleBox.js","components/SinglCard/SingleCard.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","className","type","name","placeholder","onChange","onHandlerChange","to","Navbar","src","logo","alt","Loader","FilmsCards","sortData","data","sort","a","b","title","localeCompare","map","film","index","opening_crawl","director","release_date","episode_id","ToggleBox","toggleBox","setState","oldState","isOpened","state","this","children","onClick","React","Component","SingleCard","useParams","planets","res","id","find","starships","useState","planetsData","setPlanets","starshipsData","setStarships","loading","setLoading","allPlanetsFilmsResidents","setAllPlanetsFilmsResidents","allStarshipsFilms","setAllStarshipsFilms","useEffect","fetchPlanets","Promise","all","url","fetch","then","json","response","dataFilmsResidents","i","length","urlsArrFilms","films","urlsArrResidents","residents","namesArr","resFilms","resResidents","push","filmsUrls","residentsUrls","console","log","fetchStarships","dataFilms","planet","climate","diameter","gravity","orbital_period","population","rotation_period","surface_water","terrain","arr","manufacturer","model","MGLT","cargo_capacity","consumables","cost_in_credits","crew","created","slice","edited","max_atmosphering_speed","passengers","starship_class","App","setFilms","search","setSearch","filteredFilms","setFilteredFilm","results","fetchFilms","filter","toLowerCase","includes","e","preventDefault","target","value","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"uWAqBeA,MAjBf,SAAgBC,GAEZ,OACI,sBAAKC,UAAU,aAAf,UACI,uBAAOC,KAAK,OACLD,UAAU,aACVE,KAAK,GACLC,YAAY,SACZC,SAAUL,EAAMM,kBAEvB,cAAC,IAAD,CAASC,GAAG,IAAIN,UAAU,aAA1B,SACI,mBAAGA,UAAU,wBCfd,MAA0B,2CCqB1BO,EAfA,SAACR,GACZ,OACI,sBAAKC,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,cAAC,IAAD,CAASM,GAAG,oBAAZ,SACI,qBAAKE,IAAKC,EAAMC,IAAI,uBAG5B,qBAAKV,UAAU,aAAf,SACI,cAAC,EAAD,CAAQK,gBAAiBN,EAAMM,wBCFhCM,G,MAVA,WACX,OACI,qBAAKX,UAAU,kBAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,iBCyBhBY,G,MA5BI,SAAC,GAAY,IAExBC,EAFuB,EAAVC,KAEGC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,MAAOC,cAAcF,EAAEC,UAE7D,OACI,qBAAKlB,UAAU,cAAf,SACKa,EAASO,KAAI,SAACC,EAAMC,GACjB,OACI,sBAAKtB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SAA6BqB,EAAKH,QAClC,qBAAKlB,UAAU,mBAAf,SAAmCqB,EAAKE,gBACxC,sBAAKvB,UAAU,eAAf,UACI,qBAAKA,UAAU,UAAf,SAA0BqB,EAAKG,WAC/B,qBAAKxB,UAAU,eAAf,SAA+BqB,EAAKI,kBAExC,cAAC,IAAD,CAASnB,GAAE,sCAAiCe,EAAKK,YAAjD,SACI,qBAAK1B,UAAU,WAAf,2BARmBsB,U,wCCsBhCK,E,kDA/BX,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IAQV6B,UAAY,WACR,EAAKC,UAAS,SAAAC,GAAQ,MAAK,CAAEC,UAAWD,EAASC,cARjD,EAAKC,MAAQ,CAETD,UAAU,GAJC,E,qDAaT,IAAD,EACuBE,KAAKlC,MAAzBmB,EADH,EACGA,MAAOgB,EADV,EACUA,SACPH,EAAaE,KAAKD,MAAlBD,SACR,OACI,sBAAK/B,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAWmC,QAASF,KAAKL,UAAxC,SACKV,IAEJa,GAAYG,GACT,qBAAKlC,UAAU,aAAf,SACKkC,W,GAxBDE,IAAMC,WC0OfC,EAtOI,SAAC,GAAY,IAAXxB,EAAU,EAAVA,KACVY,EAAca,cAAdb,WAKHc,EAFe1B,EAAKM,KAAI,SAAAqB,GAAG,MAAK,CAACC,GAAID,EAAIf,WAAYc,QAASC,EAAID,YACzCG,MAAK,SAAAF,GAAG,OAAIA,EAAIC,MAAQhB,KAC3Bc,QAMtBI,EAFiB9B,EAAKM,KAAI,SAAAqB,GAAG,MAAK,CAACC,GAAID,EAAIf,WAAYkB,UAAWH,EAAIG,cACzCD,MAAK,SAAAF,GAAG,OAAIA,EAAIC,MAAQhB,KAC3BkB,UAZH,EAeOC,mBAAS,IAfhB,mBAepBC,EAfoB,KAePC,EAfO,OAgBWF,mBAAS,IAhBpB,mBAgBpBG,EAhBoB,KAgBLC,EAhBK,OAiBGJ,oBAAS,GAjBZ,mBAiBpBK,EAjBoB,KAiBXC,EAjBW,OAmBqCN,mBAAS,IAnB9C,mBAmBpBO,EAnBoB,KAmBMC,EAnBN,OAoBuBR,mBAAS,IApBhC,mBAoBpBS,EApBoB,KAoBDC,EApBC,KA+F3B,OAzEAC,qBAAU,WAEN,IAAMC,EAAY,uCAAG,0CAAAzC,EAAA,+EAEU0C,QAAQC,IAC3BnB,EAAQpB,KAAI,SAAAwC,GAAG,OAAIC,MAAM,GAAD,OAAID,EAAJ,iBAAuBE,MAAK,SAAArB,GAAG,OAAIA,EAAIsB,cAHtD,OAEPC,EAFO,OAKbjB,EAAWiB,GACXb,GAAW,GAIPc,EAAqB,GAEhBC,EAAI,EAZA,YAYGA,EAAIF,EAASG,QAZhB,wBAaLC,EAAeJ,EAASE,GAAGG,MAC3BC,EAAmBN,EAASE,GAAGK,UAC/BC,EAAWR,EAASE,GAAGhE,KAflB,KAgBYwD,QAhBZ,UAiBCU,EAAahD,KAAI,SAAAwC,GAAG,OAAIC,MAAM,GAAD,OAAID,EAAJ,iBAAuBE,MAAK,SAAArB,GAAG,OAAIA,EAAIsB,aAjBrE,0CAgBoBJ,IAhBpB,+BAgBLc,EAhBK,YAmBgBf,QAnBhB,UAoBCY,EAAiBlD,KAAI,SAAAwC,GAAG,OAAIC,MAAM,GAAD,OAAID,EAAJ,iBAAuBE,MAAK,SAAArB,GAAG,OAAIA,EAAIsB,aApBzE,0CAmBwBJ,IAnBxB,wBAmBLe,EAnBK,OAsBTT,EAAmBU,KAAK,CAACzE,KAAMsE,EAAUI,UAAWH,EAAUI,cAAeH,IAtBpE,QAYwBR,IAZxB,uBAyBbb,EAA4BY,GAC5Bd,GAAW,GA1BE,kDA8Bb2B,QAAQC,IAAI,QAAZ,MA9Ba,0DAAH,qDAiCZC,EAAc,uCAAG,sCAAAhE,EAAA,+EAEQ0C,QAAQC,IAC3Bf,EAAUxB,KAAI,SAAAwC,GAAG,OAAIC,MAAM,GAAD,OAAID,EAAJ,iBAAuBE,MAAK,SAAArB,GAAG,OAAIA,EAAIsB,cAHtD,OAETC,EAFS,OAKff,EAAae,GACbb,GAAW,GAKP8B,EAAY,GAEPf,EAAI,EAbE,YAaCA,EAAIF,EAASG,QAbd,wBAcPC,EAAeJ,EAASE,GAAGG,MAC3BG,EAAWR,EAASE,GAAGhE,KAfhB,KAgBUwD,QAhBV,UAiBDU,EAAahD,KAAI,SAAAwC,GAAG,OAAIC,MAAM,GAAD,OAAID,EAAJ,iBAAuBE,MAAK,SAAArB,GAAG,OAAIA,EAAIsB,aAjBnE,0CAgBkBJ,IAhBlB,wBAgBPc,EAhBO,OAmBXQ,EAAUN,KAAK,CAACzE,KAAMsE,EAAUI,UAAWH,IAnBhC,QAasBP,IAbtB,uBAqBfX,EAAqB0B,GACrB9B,GAAW,GAtBI,kDA0Bf2B,QAAQC,IAAI,QAAZ,MA1Be,0DAAH,qDA8BpBtB,IACAuB,MACD,IAOC,mCACI,qBAAKhF,UAAU,cAAc0C,GAAIhB,EAAjC,SAEI,sBAAK1B,UAAU,OAAf,UACI,qBAAKA,UAAU,uBAAf,SAAsC,4CAElCkD,EACM,cAAC,EAAD,IACA,qBAAKlD,UAAU,gBAAf,SAEM8C,EAAY1B,KAAI,SAAC8D,EAAQ5D,GAAT,OACZ,qBAAKtB,UAAU,eAAf,SAEI,cAAC,EAAD,CACIkB,MACI,sBAAKlB,UAAU,YAAf,UACI,yCAAW,+BAAOkF,EAAOhF,UACzB,8BAAK,mBAAGF,UAAU,kCAJ9B,SAQI,sBAAKA,UAAU,mBAAf,UACI,4CAAc,+BAAOkF,EAAOC,aAC5B,6CAAe,+BAAOD,EAAOE,cAC7B,4CAAc,+BAAOF,EAAOG,aAC5B,mDAAqB,+BAAOH,EAAOI,oBACnC,+CAAiB,+BAAOJ,EAAOK,gBAC/B,oDAAsB,+BAAOL,EAAOM,qBACpC,kDAAoB,+BAAON,EAAOO,mBAClC,4CAAc,+BAAOP,EAAOQ,aAExB,gCACI,gDADJ,IACgC,uBADhC,IAEItC,EAAyBhC,KAAI,SAAAiD,GACrB,GAAIA,EAAMnE,OAASgF,EAAOhF,KACtB,OAAOmE,EAAMO,UAAUxD,KAAI,SAACuE,EAAKzB,GAC7B,OACIhB,EACM,+CAEF,iCAAegB,EAAI,EAAnB,KAAwByB,EAAIzE,MACxB,uBADJ,MAAWgD,SAQnC,qDAjBJ,IAiBqC,uBAjBrC,IAkBId,EAAyBhC,KAAI,SAAAmD,GACrB,GAAIA,EAAUrE,OAASgF,EAAOhF,KAC1B,OAAOqE,EAAUM,cAAczD,KAAI,SAACuE,EAAKzB,GACrC,OACI,iCAAeA,EAAI,EAAnB,KAAwByB,EAAIzF,KAA5B,IAAkC,uBAAlC,MAAWgE,kBA1ChB5C,QA4DvD,qBAAKtB,UAAU,uBAAf,SAAsC,8CAElCkD,EACM,cAAC,EAAD,IACA,qBAAKlD,UAAU,gBAAf,SAEGgD,EAAc5B,KAAI,SAACwB,EAAWtB,GAAZ,OACf,qBAAKtB,UAAU,iBAAf,SACI,cAAC,EAAD,CAAWkB,MACP,sBAAKlB,UAAU,YAAf,UACI,yCAAW,+BAAO4C,EAAU1C,UAC5B,8BAAK,mBAAGF,UAAU,kCAH1B,SAMI,sBAAKA,UAAU,mBAAf,UACI,iDAAmB,+BAAO4C,EAAUgD,kBACpC,0CAAY,+BAAOhD,EAAUiD,WAC7B,yCAAW,+BAAOjD,EAAUkD,UAC5B,mDAAqB,+BAAOlD,EAAUmD,oBACtC,gDAAkB,+BAAOnD,EAAUoD,iBACnC,oDAAsB,+BAAOpD,EAAUqD,qBACvC,yCAAW,+BAAOrD,EAAUsD,UAC5B,4CAAc,+BAAOtD,EAAUuD,QAAQC,MAAM,EAAG,SAChD,2CAAa,+BAAOxD,EAAUyD,OAAOD,MAAM,EAAG,SAC9C,2CAAa,+BAAOxD,EAAUuB,YAC9B,2DAA6B,+BAAOvB,EAAU0D,4BAE9C,+CAAiB,+BAAO1D,EAAU2D,gBAClC,mDAAqB,+BAAO3D,EAAU4D,oBAGlC,gCACI,gDADJ,IACgC,uBADhC,IAEIlD,EAAkBlC,KAAI,SAAAiD,GACd,GAAIA,EAAMnE,OAAS0C,EAAU1C,KACzB,OAAOmE,EAAMO,UAAUxD,KAAI,SAACuE,EAAKzB,GAC7B,OACIhB,EACM,+CAEF,iCAAegB,EAAI,EAAnB,KAAwByB,EAAIzE,MAA5B,IAAmC,uBAAnC,MAAWgD,kBAjClB5C,gBCzH1DmF,MAnDf,WAAgB,IAAD,EACe5D,mBAAS,IADxB,mBACJwB,EADI,KACGqC,EADH,OAEmB7D,oBAAS,GAF5B,mBAEJK,EAFI,KAEKC,EAFL,OAGiBN,mBAAS,IAH1B,mBAGJ8D,EAHI,KAGIC,EAHJ,OAI8B/D,qBAJ9B,mBAIJgE,EAJI,KAIWC,EAJX,KAgCX,OA1BAtD,qBAAU,WAAM,4CAEZ,8BAAAxC,EAAA,sEACoB6C,MAAM,4CAD1B,cACQpB,EADR,gBAEqBA,EAAIsB,OAFzB,OAEQjD,EAFR,OAGI4F,EAAS5F,EAAKiG,SACd5D,GAAW,GAJf,4CAFY,uBAAC,WAAD,wBASZ6D,KACD,IAEHxD,qBAAU,WACNsD,EAAgBzC,EAAM4C,QAAO,SAAA5F,GACzB,OAAOA,EAAKH,MAAMgG,cAAcC,SAASR,EAAOO,qBAErD,CAACP,EAAQtC,IAWR,sBAAKrE,UAAU,MAAf,UACI,qBAAKA,UAAU,gBAAf,SAA+B,cAAC,EAAD,CAAQK,gBATvB,SAAA+G,GACpBA,EAAEC,iBACFT,EAAUQ,EAAEE,OAAOC,YASXrE,EACM,cAAC,EAAD,IAEE,eAAC,IAAD,WACI,cAAC,IAAD,CAAOsE,OAAK,EAACC,KAAK,oBAAoBC,OAAQ,kBAAM,cAAC,EAAD,CAAY5G,KAAM+F,OACtE,cAAC,IAAD,CAAOW,OAAK,EAACC,KAAI,0CACVC,OAAQ,kBAAM,cAAC,EAAD,CAAY5G,KAAMuD,OACvC,cAAC,IAAD,CAAOqD,OAAQ,kBAAM,+DCvClCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/D,MAAK,YAAkD,IAA/CgE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAST,OACL,cAAC,IAAD,UACI,cAAC,IAAMU,WAAP,UACI,cAAC,EAAD,QAGVC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.e51d5854.chunk.js","sourcesContent":["import React from 'react';\nimport './Search.sass';\nimport {NavLink} from \"react-router-dom\";\n\nfunction Search(props) {\n\n    return (\n        <div className=\"search-box\">\n            <input type=\"text\"\n                   className=\"search-txt\"\n                   name=\"\"\n                   placeholder=\"Search\"\n                   onChange={props.onHandlerChange}\n            />\n            <NavLink to=\"#\" className=\"search-btn\">\n                <i className=\"fas fa-search\"/>\n            </NavLink>\n        </div>\n    )\n}\n\nexport default Search;\n","export default __webpack_public_path__ + \"static/media/star_wars_logo.b516d009.png\";","import React from 'react';\nimport './Navbar.sass';\nimport Search from \"../Search/Search\";\nimport {NavLink} from \"react-router-dom\";\nimport logo from '../img/star_wars_logo.png';\n\nconst Navbar = (props) => {\n    return (\n        <nav className='nav'>\n            <div className=\"nav-logo\">\n                <NavLink to='/star_wars_films/'>\n                    <img src={logo} alt=\"star wars logo\"/>\n                </NavLink>\n            </div>\n            <div className=\"nav-search\">\n                <Search onHandlerChange={props.onHandlerChange}/>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from 'react';\nimport \"./Loader.sass\";\n\nconst Loader = () => {\n    return (\n        <div className=\"containerLoader\">\n            <div className=\"preloader\">\n                <div className=\"loader\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default Loader;\n","import React from 'react';\nimport \"./FilmsCards.sass\";\nimport {NavLink} from \"react-router-dom\";\n\nconst FilmsCards = ({data}) => {\n\n    let sortData = data.sort((a, b) => (a.title).localeCompare(b.title));\n\n    return (\n        <div className=\"films-cards\">\n            {sortData.map((film, index) => {\n                return (\n                    <div className=\"card\" key={index}>\n                        <div className=\"card-title\">{film.title}</div>\n                        <div className=\"card-description\">{film.opening_crawl}</div>\n                        <div className=\"card-creator\">\n                            <div className=\"creator\">{film.director}</div>\n                            <div className=\"release-data\">{film.release_date}</div>\n                        </div>\n                        <NavLink to={`/star_wars_films/singleCard/${film.episode_id}`}>\n                            <div className=\"card-btn\">\n                                Show more\n                            </div>\n                        </NavLink>\n                    </div>\n                )\n            })}\n\n        </div>\n    )\n}\n\nexport default FilmsCards;\n","import React from 'react';\n\nclass ToggleBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // toggle box is closed initially\n            isOpened: false,\n        };\n       // this.toggleBox = this.toggleBox.bind(this);\n    }\n\n    toggleBox = () => {\n        this.setState(oldState => ({ isOpened: !oldState.isOpened }));\n    }\n\n    render() {\n        const { title, children } = this.props;\n        const { isOpened } = this.state;\n        return (\n            <div className=\"box\">\n                <div className=\"boxTitle\" onClick={this.toggleBox}>\n                    {title}\n                </div>\n                {isOpened && children && (\n                    <div className=\"boxContent\">\n                        {children}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ToggleBox;\n","import React, {useState, useEffect} from 'react';\nimport \"./SingleCard.sass\";\nimport {useParams} from 'react-router-dom';\nimport Loader from \"../Loader/Loader\";\nimport ToggleBox from \"../ToggleBox/ToggleBox\";\n\nconst SingleCard = ({data}) => {\n    const {episode_id} = useParams();\n\n    //get array of planets film\n    const allPlanets = data.map(res => ({id: res.episode_id, planets: res.planets,}));\n    let filmPlanets = allPlanets.find(res => res.id === +episode_id);\n    let planets = filmPlanets.planets;\n    //console.log(planets);\n\n    //get array of starships film\n    const AllStarships = data.map(res => ({id: res.episode_id, starships: res.starships}));\n    let filmStarships = AllStarships.find(res => res.id === +episode_id);\n    let starships = filmStarships.starships\n    // console.log(starships);\n\n    const [planetsData, setPlanets] = useState([]);\n    const [starshipsData, setStarships] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const [allPlanetsFilmsResidents, setAllPlanetsFilmsResidents] = useState([]);\n    const [allStarshipsFilms, setAllStarshipsFilms] = useState([]);\n\n    useEffect(() => {\n\n        const fetchPlanets = async () => {\n            try {\n                const response = await Promise.all(\n                    planets.map(url => fetch(`${url}?format=json`).then(res => res.json()))\n                );\n                setPlanets(response);\n                setLoading(false);\n                //console.log(response);\n\n                //fetch of films, residents in planets\n                let dataFilmsResidents = [];\n\n                for (let i = 0; i < response.length; i++) {\n                    let urlsArrFilms = response[i].films;\n                    let urlsArrResidents = response[i].residents;\n                    let namesArr = response[i].name;\n                    let resFilms = await Promise.all(\n                        await urlsArrFilms.map(url => fetch(`${url}?format=json`).then(res => res.json()))\n                    );\n                    let resResidents = await Promise.all(\n                        await urlsArrResidents.map(url => fetch(`${url}?format=json`).then(res => res.json()))\n                    );\n                    dataFilmsResidents.push({name: namesArr, filmsUrls: resFilms, residentsUrls: resResidents});\n\n                }\n                setAllPlanetsFilmsResidents(dataFilmsResidents);\n                setLoading(false);\n                //console.log(dataFilms);\n\n            } catch (error) {\n                console.log(\"Error\", error)\n            }\n        };\n        const fetchStarships = async () => {\n            try {\n                const response = await Promise.all(\n                    starships.map(url => fetch(`${url}?format=json`).then(res => res.json()))\n                );\n                setStarships(response);\n                setLoading(false);\n\n                //console.log(response);\n\n                //fetch of films, pilots in starships\n                let dataFilms = [];\n\n                for (let i = 0; i < response.length; i++) {\n                    let urlsArrFilms = response[i].films;\n                    let namesArr = response[i].name;\n                    let resFilms = await Promise.all(\n                        await urlsArrFilms.map(url => fetch(`${url}?format=json`).then(res => res.json()))\n                    );\n                    dataFilms.push({name: namesArr, filmsUrls: resFilms});\n                }\n                setAllStarshipsFilms(dataFilms);\n                setLoading(false);\n                //console.log(dataFilms);\n\n            } catch (error) {\n                console.log(\"Error\", error)\n            }\n        }\n\n        fetchPlanets();\n        fetchStarships();\n    }, []);\n\n    //console.log(allPlanetsFilms.map(film => film.name));\n    // console.log('starships', starshipsData);\n    //console.log('planets', planetsData);\n\n    return (\n        <>\n            <div className=\"single-card\" id={episode_id}>\n\n                <div className=\"card\">\n                    <div className=\"cards-planets-header\"><h1>Planets:</h1></div>\n                    {\n                        loading\n                            ? <Loader/>\n                            : <div className=\"cards-planets\">\n                                {\n                                    planetsData.map((planet, index) => (\n                                        <div className='card-planets' key={index}>\n\n                                            <ToggleBox\n                                                title={\n                                                    <div className=\"card-name\">\n                                                        <div>Name: <span>{planet.name}</span></div>\n                                                        <div><i className=\"fas fa-arrow-circle-down\"/></div>\n                                                    </div>\n                                                }>\n                                                {/*children*/}\n                                                <div className=\"card-description\">\n                                                    <div>Climate: <span>{planet.climate}</span></div>\n                                                    <div>Diameter: <span>{planet.diameter}</span></div>\n                                                    <div>Gravity: <span>{planet.gravity}</span></div>\n                                                    <div>Orbital period: <span>{planet.orbital_period}</span></div>\n                                                    <div>Population: <span>{planet.population}</span></div>\n                                                    <div>Rotation period: <span>{planet.rotation_period}</span></div>\n                                                    <div>Surface water: <span>{planet.surface_water}</span></div>\n                                                    <div>Terrain: <span>{planet.terrain}</span></div>\n                                                    {\n                                                        <div>\n                                                            <strong>All Films:</strong> <br/> {\n                                                            allPlanetsFilmsResidents.map(films => {\n                                                                    if (films.name === planet.name) {\n                                                                        return films.filmsUrls.map((arr, i) => {\n                                                                            return (\n                                                                                loading\n                                                                                    ? <span>Loading ...</span>\n                                                                                    :\n                                                                                    <span key={i}>{i + 1}. {arr.title}\n                                                                                        <br/> </span>\n                                                                            )\n                                                                        })\n                                                                    }\n                                                                }\n                                                            )\n                                                        }\n                                                            <strong>All Residents: </strong> <br/> {\n                                                            allPlanetsFilmsResidents.map(residents => {\n                                                                    if (residents.name === planet.name) {\n                                                                        return residents.residentsUrls.map((arr, i) => {\n                                                                            return (\n                                                                                <span key={i}>{i + 1}. {arr.name} <br/> </span>\n                                                                            )\n                                                                        })\n                                                                    }\n                                                                }\n                                                            )\n                                                        }\n                                                        </div>\n                                                    }\n                                                </div>\n                                            </ToggleBox>\n\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                    }\n\n                    <div className=\"cards-planets-header\"><h1>Starships:</h1></div>\n                    {\n                        loading\n                            ? <Loader/>\n                            : <div className=\"cards-planets\">\n\n                                {starshipsData.map((starships, index) => (\n                                    <div className='card-starships' key={index}>\n                                        <ToggleBox title={\n                                            <div className=\"card-name\">\n                                                <div>Name: <span>{starships.name}</span></div>\n                                                <div><i className=\"fas fa-arrow-circle-down\"/></div>\n                                            </div>\n                                        }>\n                                            <div className=\"card-description\">\n                                                <div>Manufacturer: <span>{starships.manufacturer}</span></div>\n                                                <div>Model: <span>{starships.model}</span></div>\n                                                <div>MGLT: <span>{starships.MGLT}</span></div>\n                                                <div>Cargo Capacity: <span>{starships.cargo_capacity}</span></div>\n                                                <div>Consumables: <span>{starships.consumables}</span></div>\n                                                <div>Cost in credits: <span>{starships.cost_in_credits}</span></div>\n                                                <div>Crew: <span>{starships.crew}</span></div>\n                                                <div>Created: <span>{starships.created.slice(0, 10)}</span></div>\n                                                <div>Edited: <span>{starships.edited.slice(0, 10)}</span></div>\n                                                <div>Length: <span>{starships.length}</span></div>\n                                                <div>Max atmosphering speed: <span>{starships.max_atmosphering_speed}</span>\n                                                </div>\n                                                <div>Passengers: <span>{starships.passengers}</span></div>\n                                                <div>Starship class: <span>{starships.starship_class}</span></div>\n\n                                                {\n                                                    <div>\n                                                        <strong>All Films:</strong> <br/> {\n                                                        allStarshipsFilms.map(films => {\n                                                                if (films.name === starships.name) {\n                                                                    return films.filmsUrls.map((arr, i) => {\n                                                                        return (\n                                                                            loading\n                                                                                ? <span>Loading ...</span>\n                                                                                :\n                                                                                <span key={i}>{i + 1}. {arr.title} <br/> </span>\n                                                                        )\n                                                                    })\n                                                                }\n                                                            }\n                                                        )\n                                                    }\n                                                    </div>\n                                                }\n                                            </div>\n                                        </ToggleBox>\n                                    </div>\n                                ))}\n                            </div>\n                    }\n                </div>\n\n            </div>\n        </>\n\n    )\n}\n\nexport default SingleCard;\n","import React, {useState, useEffect} from 'react';\nimport './App.sass';\nimport {Route, Switch} from 'react-router-dom';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Loader from \"./components/Loader/Loader\";\nimport FilmsCards from \"./components/FilmsCards/FilmsCards\";\nimport SingleCard from \"./components/SinglCard/SingleCard\";\n\nfunction App() {\n    const [films, setFilms] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [search, setSearch] = useState('');\n    const [filteredFilms, setFilteredFilm] = useState()\n\n    useEffect(() => {\n\n        async function fetchFilms() {\n            let res = await fetch('https://swapi.dev/api/films/?format=json');\n            let data = await res.json();\n            setFilms(data.results);\n            setLoading(false);\n        }\n\n        fetchFilms();\n    }, []);\n\n    useEffect(() => {\n        setFilteredFilm(films.filter(film => {\n            return film.title.toLowerCase().includes(search.toLowerCase())\n        }))\n    }, [search, films])\n\n\n    const onHandlerChange = e => {\n        e.preventDefault();\n        setSearch(e.target.value);\n    }\n\n    // console.log(films);\n\n    return (\n        <div className=\"App\">\n            <div className=\"nav-container\"><Navbar onHandlerChange={onHandlerChange}/></div>\n            {\n                loading\n                    ? <Loader/>\n                    : (\n                        <Switch>\n                            <Route exact path='/star_wars_films/' render={() => <FilmsCards data={filteredFilms}/>}/>\n                            <Route exact path={`/star_wars_films/singleCard/:episode_id`}\n                                   render={() => <SingleCard data={films}/>}/>\n                            <Route render={() => <h1>404: page not found</h1>}/>\n                        </Switch>\n                    )\n            }\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}