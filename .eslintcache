[{"/Users/macbook/Desktop/star_wars_films/src/index.js":"1","/Users/macbook/Desktop/star_wars_films/src/App.js":"2","/Users/macbook/Desktop/star_wars_films/src/reportWebVitals.js":"3","/Users/macbook/Desktop/star_wars_films/src/components/Navbar/Navbar.js":"4","/Users/macbook/Desktop/star_wars_films/src/components/Search/Search.js":"5","/Users/macbook/Desktop/star_wars_films/src/components/Loader/Loader.js":"6","/Users/macbook/Desktop/star_wars_films/src/components/FilmsCards/FilmsCards.js":"7","/Users/macbook/Desktop/star_wars_films/src/components/SinglCard/SingleCard.js":"8"},{"size":583,"mtime":1611762001508,"results":"9","hashOfConfig":"10"},{"size":1908,"mtime":1611906031806,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1611757166611,"results":"12","hashOfConfig":"10"},{"size":616,"mtime":1611906031810,"results":"13","hashOfConfig":"10"},{"size":546,"mtime":1611864153574,"results":"14","hashOfConfig":"10"},{"size":278,"mtime":1611830036527,"results":"15","hashOfConfig":"10"},{"size":1152,"mtime":1611906031808,"results":"16","hashOfConfig":"10"},{"size":5724,"mtime":1611907117361,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1u8jpug",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"/Users/macbook/Desktop/star_wars_films/src/index.js",[],["36","37"],"/Users/macbook/Desktop/star_wars_films/src/App.js",[],"/Users/macbook/Desktop/star_wars_films/src/reportWebVitals.js",[],"/Users/macbook/Desktop/star_wars_films/src/components/Navbar/Navbar.js",[],"/Users/macbook/Desktop/star_wars_films/src/components/Search/Search.js",[],"/Users/macbook/Desktop/star_wars_films/src/components/Loader/Loader.js",[],"/Users/macbook/Desktop/star_wars_films/src/components/FilmsCards/FilmsCards.js",[],"/Users/macbook/Desktop/star_wars_films/src/components/SinglCard/SingleCard.js",["38"],"import React, {useState, useEffect} from 'react';\nimport \"./SingleCard.sass\";\nimport {useParams} from 'react-router-dom';\nimport Loader from \"../Loader/Loader\";\n\nconst SingleCard = ({data}) => {\n\n    const {episode_id} = useParams();\n    //get array of planets film\n    const allPlanets = data.map(res => ({id: res.episode_id, planets: res.planets,}));\n    let filmPlanets = allPlanets.find(res => res.id === +episode_id)\n    let planets = filmPlanets.planets\n    // console.log(planets);\n\n    //get array of starships film\n    const AllStarships = data.map(res => ({id: res.episode_id, starships: res.starships}));\n    let filmStarships = AllStarships.find(res => res.id === +episode_id);\n    let starships = filmStarships.starships\n    // console.log(starships);\n\n    const [planetsData, setPlanets] = useState([]);\n    const [starshipsData, setStarships] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchStarships = async () => {\n            try {\n                const response = await Promise.all(\n                    starships.map(url => fetch(`${url}?format=json`).then(res => res.json()))\n                );\n                setStarships(response);\n                setLoading(false);\n            } catch (error) {\n                console.log(\"Error\", error)\n            }\n        }\n        const fetchFilms = async () => {\n            try {\n                const response = await Promise.all(\n                    planets.map(url => fetch(`${url}?format=json`).then(res => res.json()))\n                );\n                setPlanets(response);\n                setLoading(false);\n            } catch (error) {\n                console.log(\"Error\", error)\n            }\n        };\n\n        fetchStarships();\n        fetchFilms();\n\n        console.log('starships', starshipsData);\n        console.log('planets', planetsData);\n    }, []);\n\n    return (\n        <>\n            <div className=\"single-card\" id={episode_id}>\n\n                <div className=\"card\">\n                    <div className=\"cards-planets-header\"><h1>Planets:</h1></div>\n                        {\n                            loading\n                                ? <Loader/>\n                                : <div className=\"cards-planets\">\n                                    {\n                                        planetsData.map((planet, index) => (\n                                            <div className='card-planets' key={index}>\n                                                <div>Name: <span>{planet.name}</span></div>\n                                                <div>Climate: <span>{planet.climate}</span></div>\n                                                <div>Diameter: <span>{planet.diameter}</span></div>\n                                                <div>Gravity: <span>{planet.gravity}</span></div>\n                                                <div>Orbital period: <span>{planet.orbital_period}</span></div>\n                                                <div>Population: <span>{planet.population}</span></div>\n                                                <div>Rotation period: <span>{planet.rotation_period}</span></div>\n                                                <div>Surface water: <span>{planet.surface_water}</span></div>\n                                                <div>Terrain: <span>{planet.terrain}</span></div>\n                                            </div>\n                                        ))\n                                    }\n                                </div>\n                        }\n\n                        <div className=\"cards-planets-header\"><h1>Starships:</h1></div>\n                        {\n                            loading\n                                ? <Loader/>\n                                : <div className=\"cards-planets\">\n\n                                    {starshipsData.map((starships, index) => (\n                                        <div className='card-starships' key={index}>\n                                            <div>Manufacturer: <span>{starships.manufacturer}</span></div>\n                                            <div>Model: <span>{starships.model}</span></div>\n                                            <div>Name: <span>{starships.name}</span></div>\n                                            <div>MGLT: <span>{starships.MGLT}</span></div>\n                                            <div>Cargo Capacity: <span>{starships.cargo_capacity}</span></div>\n                                            <div>Consumables: <span>{starships.consumables}</span></div>\n                                            <div>Cost in credits: <span>{starships.cost_in_credits}</span></div>\n                                            <div>Crew: <span>{starships.crew}</span></div>\n                                            <div>Created: <span>{starships.created.slice(0, 10)}</span></div>\n                                            <div>Edited: <span>{starships.edited.slice(0, 10)}</span></div>\n                                            <div>Length: <span>{starships.length}</span></div>\n                                            <div>Max atmosphering speed: <span>{starships.max_atmosphering_speed}</span></div>\n                                            <div>Passengers: <span>{starships.passengers}</span></div>\n                                            <div>Starship class<span>{starships.starship_class}</span></div>\n                                        </div>\n                                    ))}\n                                </div>\n                        }\n                </div>\n\n            </div>\n        </>\n\n    )\n}\n\nexport default SingleCard;\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":54,"column":8,"nodeType":"45","endLine":54,"endColumn":10,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'planets', 'planetsData', 'starships', and 'starshipsData'. Either include them or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [planets, planetsData, starships, starshipsData]",{"range":"52","text":"53"},[1893,1895],"[planets, planetsData, starships, starshipsData]"]